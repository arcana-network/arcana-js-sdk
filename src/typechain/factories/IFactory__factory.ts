/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IFactory, IFactoryInterface } from "../IFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_appName",
        type: "string",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_store",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bandwidth",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_relayer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_onlyDKGAddress",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "_aggregateLogin",
        type: "bool",
      },
      {
        internalType: "uint128",
        name: "_appId",
        type: "uint128",
      },
      {
        internalType: "uint8",
        name: "_walletMode",
        type: "uint8",
      },
      {
        internalType: "string[]",
        name: "_client",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "_clientId",
        type: "string[]",
      },
    ],
    name: "createNewApp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "gateway",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "x",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "y",
            type: "bytes32",
          },
        ],
        internalType: "struct IFactory.publicKey",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_id",
        type: "uint128",
      },
    ],
    name: "idToAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_app",
        type: "address",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "isRegisteredUser",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_node",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_value",
        type: "bool",
      },
    ],
    name: "modifyNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_app",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "store",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bandwidth",
        type: "uint256",
      },
    ],
    name: "setAppLevelLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_storage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_bandwidth",
        type: "uint256",
      },
    ],
    name: "setDefaultLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newTreshold",
        type: "uint256",
      },
    ],
    name: "setTreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_app",
        type: "address",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_value",
        type: "bool",
      },
    ],
    name: "voteUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IFactoryInterface {
    return new utils.Interface(_abi) as IFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IFactory {
    return new Contract(address, _abi, signerOrProvider) as IFactory;
  }
}
