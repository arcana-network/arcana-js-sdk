/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createNewApp(string,address,bool,bool,uint128)": FunctionFragment;
    "idToAddress(uint128)": FunctionFragment;
    "isRegisteredUser(address,address)": FunctionFragment;
    "modifyNode(address,bool)": FunctionFragment;
    "setAppLevelLimit(address,uint256,uint256)": FunctionFragment;
    "setDefaultLimit(uint256,uint256)": FunctionFragment;
    "setTreshold(uint256)": FunctionFragment;
    "voteUser(address,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewApp",
    values: [string, string, boolean, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyNode",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppLevelLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteUser",
    values: [string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modifyNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAppLevelLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteUser", data: BytesLike): Result;

  events: {};
}

export class IFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFactoryInterface;

  functions: {
    createNewApp(
      _appName: string,
      _relayer: string,
      _onlyDKGAddress: boolean,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    idToAddress(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isRegisteredUser(
      _app: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    modifyNode(
      _node: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAppLevelLimit(
      _app: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultLimit(
      _storage: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreshold(
      _newTreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteUser(
      _app: string,
      _user: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createNewApp(
    _appName: string,
    _relayer: string,
    _onlyDKGAddress: boolean,
    _aggregateLogin: boolean,
    _appId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  idToAddress(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isRegisteredUser(
    _app: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modifyNode(
    _node: string,
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAppLevelLimit(
    _app: string,
    store: BigNumberish,
    bandwidth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultLimit(
    _storage: BigNumberish,
    _bandwidth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreshold(
    _newTreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteUser(
    _app: string,
    _user: string,
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNewApp(
      _appName: string,
      _relayer: string,
      _onlyDKGAddress: boolean,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    idToAddress(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isRegisteredUser(
      _app: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modifyNode(
      _node: string,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAppLevelLimit(
      _app: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultLimit(
      _storage: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreshold(
      _newTreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteUser(
      _app: string,
      _user: string,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createNewApp(
      _appName: string,
      _relayer: string,
      _onlyDKGAddress: boolean,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    idToAddress(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredUser(
      _app: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyNode(
      _node: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAppLevelLimit(
      _app: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultLimit(
      _storage: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreshold(
      _newTreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteUser(
      _app: string,
      _user: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewApp(
      _appName: string,
      _relayer: string,
      _onlyDKGAddress: boolean,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    idToAddress(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredUser(
      _app: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyNode(
      _node: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAppLevelLimit(
      _app: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultLimit(
      _storage: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreshold(
      _newTreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteUser(
      _app: string,
      _user: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
