/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ArcanaInterface extends ethers.utils.Interface {
  functions: {
    "accessSpecifier(bytes32,bytes32,address)": FunctionFragment;
    "aggregateLogin()": FunctionFragment;
    "appId()": FunctionFragment;
    "appName()": FunctionFragment;
    "changeFileOwner(bytes32,address)": FunctionFragment;
    "changeUserStatus(address,uint8)": FunctionFragment;
    "checkPermission(bytes32,bytes32,address)": FunctionFragment;
    "clientID(string)": FunctionFragment;
    "consumption(address)": FunctionFragment;
    "defaultLimit()": FunctionFragment;
    "deleteAccount()": FunctionFragment;
    "deleteFile(bytes32)": FunctionFragment;
    "factory()": FunctionFragment;
    "files(bytes32)": FunctionFragment;
    "getAllUsers(bytes32,bytes32)": FunctionFragment;
    "getDownloadLimit()": FunctionFragment;
    "getFile(bytes32,bytes32)": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getUploadLimit()": FunctionFragment;
    "initialize(string,address,address,bool,uint128,uint8,string[],string[])": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "limit(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "reactivateAccount()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(bytes32,address,bytes32)": FunctionFragment;
    "setAppLevelLimit(uint256,uint256)": FunctionFragment;
    "setAppName(string)": FunctionFragment;
    "setClientId(string,string)": FunctionFragment;
    "setClientIds(string[],string[])": FunctionFragment;
    "setDefaultLimit(uint256,uint256)": FunctionFragment;
    "setUserLevelLimit(address,uint256,uint256)": FunctionFragment;
    "share(bytes32[],address[],bytes32[],uint256[])": FunctionFragment;
    "shareUser(bytes32[],address[],bytes32[],uint256[])": FunctionFragment;
    "status(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "uploadClose(bytes32)": FunctionFragment;
    "uploadInit(bytes32,uint256,bytes,address,address)": FunctionFragment;
    "userAccess(bytes32,bytes32,uint256)": FunctionFragment;
    "walletType()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessSpecifier",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateLogin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(functionFragment: "appName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeFileOwner",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeUserStatus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPermission",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "clientID", values: [string]): string;
  encodeFunctionData(functionFragment: "consumption", values: [string]): string;
  encodeFunctionData(
    functionFragment: "defaultLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFile",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "files", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDownloadLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFile",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUploadLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "limit", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivateAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppLevelLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAppName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setClientId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setClientIds",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserLevelLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "share",
    values: [BytesLike[], string[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shareUser",
    values: [BytesLike[], string[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "status", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadClose",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadInit",
    values: [BytesLike, BigNumberish, BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userAccess",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "walletType",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accessSpecifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateLogin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFileOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeUserStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clientID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDownloadLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUploadLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivateAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAppLevelLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAppName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClientId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClientIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserLevelLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "share", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uploadInit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "walletType", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DeleteFileEvent(address,bytes32)": EventFragment;
    "NewFileUpdate(address,bytes32,uint256)": EventFragment;
    "NewPermissionCheck(address,bytes32,uint256,bytes32)": EventFragment;
    "NewShare(address,bytes32,address,bytes32,uint256)": EventFragment;
    "NewUpdateAccess(address,bytes32,address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteFileEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFileUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPermissionCheck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewShare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUpdateAccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type DeleteFileEventEvent = TypedEvent<
  [string, string] & { identity: string; file: string }
>;

export type NewFileUpdateEvent = TypedEvent<
  [string, string, BigNumber] & {
    identity: string;
    file: string;
    fileSize: BigNumber;
  }
>;

export type NewPermissionCheckEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    identity: string;
    file: string;
    validity: BigNumber;
    accessType: string;
  }
>;

export type NewShareEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    identity: string;
    file: string;
    user: string;
    accessType: string;
    validity: BigNumber;
  }
>;

export type NewUpdateAccessEvent = TypedEvent<
  [string, string, string, string] & {
    identity: string;
    file: string;
    user: string;
    accessType: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class Arcana extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArcanaInterface;

  functions: {
    accessSpecifier(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    aggregateLogin(overrides?: CallOverrides): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[BigNumber]>;

    appName(overrides?: CallOverrides): Promise<[string]>;

    changeFileOwner(
      _file: BytesLike,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeUserStatus(
      _user: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkPermission(
      _file: BytesLike,
      _accessType: BytesLike,
      _ephemeral_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clientID(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    consumption(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
    >;

    defaultLimit(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
    >;

    deleteAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteFile(
      _file: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    files(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string, string] & {
        owner: string;
        fileSize: BigNumber;
        uploaded: boolean;
        encryptedMetaData: string;
        storageNode: string;
      }
    >;

    getAllUsers(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getDownloadLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getFile(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, boolean, string, string] & {
          owner: string;
          fileSize: BigNumber;
          uploaded: boolean;
          encryptedMetaData: string;
          storageNode: string;
        }
      ]
    >;

    getImplementation(overrides?: CallOverrides): Promise<[string]>;

    getUploadLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    initialize(
      _appName: string,
      _factory: string,
      _relayer: string,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      _wallet_type: BigNumberish,
      _client: string[],
      _clientId: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    limit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reactivateAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      _file: BytesLike,
      _user: string,
      _accessType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAppLevelLimit(
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAppName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClientId(
      _client: string,
      _clientId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClientIds(
      _client: string[],
      _clientId: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultLimit(
      _store: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserLevelLimit(
      user: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    share(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareUser(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uploadClose(
      _file: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uploadInit(
      _file: BytesLike,
      _fileSize: BigNumberish,
      _encryptedMetaData: BytesLike,
      _storageNode: string,
      _ephemeral_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAccess(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    walletType(overrides?: CallOverrides): Promise<[number]>;
  };

  accessSpecifier(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  aggregateLogin(overrides?: CallOverrides): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<BigNumber>;

  appName(overrides?: CallOverrides): Promise<string>;

  changeFileOwner(
    _file: BytesLike,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeUserStatus(
    _user: string,
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkPermission(
    _file: BytesLike,
    _accessType: BytesLike,
    _ephemeral_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clientID(arg0: string, overrides?: CallOverrides): Promise<string>;

  consumption(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
  >;

  defaultLimit(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
  >;

  deleteAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteFile(
    _file: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  files(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, string, string] & {
      owner: string;
      fileSize: BigNumber;
      uploaded: boolean;
      encryptedMetaData: string;
      storageNode: string;
    }
  >;

  getAllUsers(
    _file: BytesLike,
    _accessType: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getDownloadLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getFile(
    _file: BytesLike,
    _accessType: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, string, string] & {
      owner: string;
      fileSize: BigNumber;
      uploaded: boolean;
      encryptedMetaData: string;
      storageNode: string;
    }
  >;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  getUploadLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  initialize(
    _appName: string,
    _factory: string,
    _relayer: string,
    _aggregateLogin: boolean,
    _appId: BigNumberish,
    _wallet_type: BigNumberish,
    _client: string[],
    _clientId: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  limit(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  reactivateAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    _file: BytesLike,
    _user: string,
    _accessType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAppLevelLimit(
    store: BigNumberish,
    bandwidth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAppName(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClientId(
    _client: string,
    _clientId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClientIds(
    _client: string[],
    _clientId: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultLimit(
    _store: BigNumberish,
    _bandwidth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserLevelLimit(
    user: string,
    store: BigNumberish,
    bandwidth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  share(
    _files: BytesLike[],
    _user: string[],
    _accessType: BytesLike[],
    _validity: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareUser(
    _files: BytesLike[],
    _user: string[],
    _accessType: BytesLike[],
    _validity: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(arg0: string, overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uploadClose(
    _file: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uploadInit(
    _file: BytesLike,
    _fileSize: BigNumberish,
    _encryptedMetaData: BytesLike,
    _storageNode: string,
    _ephemeral_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAccess(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  walletType(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    accessSpecifier(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregateLogin(overrides?: CallOverrides): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    appName(overrides?: CallOverrides): Promise<string>;

    changeFileOwner(
      _file: BytesLike,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeUserStatus(
      _user: string,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkPermission(
      _file: BytesLike,
      _accessType: BytesLike,
      _ephemeral_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clientID(arg0: string, overrides?: CallOverrides): Promise<string>;

    consumption(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
    >;

    defaultLimit(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
    >;

    deleteAccount(overrides?: CallOverrides): Promise<void>;

    deleteFile(_file: BytesLike, overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    files(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string, string] & {
        owner: string;
        fileSize: BigNumber;
        uploaded: boolean;
        encryptedMetaData: string;
        storageNode: string;
      }
    >;

    getAllUsers(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getDownloadLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getFile(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string, string] & {
        owner: string;
        fileSize: BigNumber;
        uploaded: boolean;
        encryptedMetaData: string;
        storageNode: string;
      }
    >;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getUploadLimit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    initialize(
      _appName: string,
      _factory: string,
      _relayer: string,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      _wallet_type: BigNumberish,
      _client: string[],
      _clientId: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { store: BigNumber; bandwidth: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    reactivateAccount(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(
      _file: BytesLike,
      _user: string,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAppLevelLimit(
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAppName(_name: string, overrides?: CallOverrides): Promise<void>;

    setClientId(
      _client: string,
      _clientId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setClientIds(
      _client: string[],
      _clientId: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultLimit(
      _store: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserLevelLimit(
      user: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    share(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    shareUser(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    status(arg0: string, overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uploadClose(_file: BytesLike, overrides?: CallOverrides): Promise<void>;

    uploadInit(
      _file: BytesLike,
      _fileSize: BigNumberish,
      _encryptedMetaData: BytesLike,
      _storageNode: string,
      _ephemeral_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userAccess(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    walletType(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "DeleteFileEvent(address,bytes32)"(
      identity?: string | null,
      file?: BytesLike | null
    ): TypedEventFilter<[string, string], { identity: string; file: string }>;

    DeleteFileEvent(
      identity?: string | null,
      file?: BytesLike | null
    ): TypedEventFilter<[string, string], { identity: string; file: string }>;

    "NewFileUpdate(address,bytes32,uint256)"(
      identity?: string | null,
      file?: BytesLike | null,
      fileSize?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { identity: string; file: string; fileSize: BigNumber }
    >;

    NewFileUpdate(
      identity?: string | null,
      file?: BytesLike | null,
      fileSize?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { identity: string; file: string; fileSize: BigNumber }
    >;

    "NewPermissionCheck(address,bytes32,uint256,bytes32)"(
      identity?: string | null,
      file?: BytesLike | null,
      validity?: null,
      accessType?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        identity: string;
        file: string;
        validity: BigNumber;
        accessType: string;
      }
    >;

    NewPermissionCheck(
      identity?: string | null,
      file?: BytesLike | null,
      validity?: null,
      accessType?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        identity: string;
        file: string;
        validity: BigNumber;
        accessType: string;
      }
    >;

    "NewShare(address,bytes32,address,bytes32,uint256)"(
      identity?: string | null,
      file?: BytesLike | null,
      user?: string | null,
      accessType?: null,
      validity?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        identity: string;
        file: string;
        user: string;
        accessType: string;
        validity: BigNumber;
      }
    >;

    NewShare(
      identity?: string | null,
      file?: BytesLike | null,
      user?: string | null,
      accessType?: null,
      validity?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        identity: string;
        file: string;
        user: string;
        accessType: string;
        validity: BigNumber;
      }
    >;

    "NewUpdateAccess(address,bytes32,address,bytes32)"(
      identity?: string | null,
      file?: BytesLike | null,
      user?: string | null,
      accessType?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { identity: string; file: string; user: string; accessType: string }
    >;

    NewUpdateAccess(
      identity?: string | null,
      file?: BytesLike | null,
      user?: string | null,
      accessType?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { identity: string; file: string; user: string; accessType: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    accessSpecifier(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregateLogin(overrides?: CallOverrides): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    appName(overrides?: CallOverrides): Promise<BigNumber>;

    changeFileOwner(
      _file: BytesLike,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeUserStatus(
      _user: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkPermission(
      _file: BytesLike,
      _accessType: BytesLike,
      _ephemeral_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clientID(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    consumption(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    defaultLimit(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteFile(
      _file: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    files(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getAllUsers(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDownloadLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getFile(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getUploadLimit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _appName: string,
      _factory: string,
      _relayer: string,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      _wallet_type: BigNumberish,
      _client: string[],
      _clientId: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reactivateAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      _file: BytesLike,
      _user: string,
      _accessType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAppLevelLimit(
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAppName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClientId(
      _client: string,
      _clientId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClientIds(
      _client: string[],
      _clientId: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultLimit(
      _store: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserLevelLimit(
      user: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    share(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareUser(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uploadClose(
      _file: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uploadInit(
      _file: BytesLike,
      _fileSize: BigNumberish,
      _encryptedMetaData: BytesLike,
      _storageNode: string,
      _ephemeral_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAccess(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletType(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessSpecifier(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregateLogin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeFileOwner(
      _file: BytesLike,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeUserStatus(
      _user: string,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkPermission(
      _file: BytesLike,
      _accessType: BytesLike,
      _ephemeral_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clientID(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consumption(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteFile(
      _file: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    files(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllUsers(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDownloadLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFile(
      _file: BytesLike,
      _accessType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUploadLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _appName: string,
      _factory: string,
      _relayer: string,
      _aggregateLogin: boolean,
      _appId: BigNumberish,
      _wallet_type: BigNumberish,
      _client: string[],
      _clientId: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reactivateAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      _file: BytesLike,
      _user: string,
      _accessType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAppLevelLimit(
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAppName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClientId(
      _client: string,
      _clientId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClientIds(
      _client: string[],
      _clientId: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultLimit(
      _store: BigNumberish,
      _bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserLevelLimit(
      user: string,
      store: BigNumberish,
      bandwidth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    share(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareUser(
      _files: BytesLike[],
      _user: string[],
      _accessType: BytesLike[],
      _validity: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uploadClose(
      _file: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uploadInit(
      _file: BytesLike,
      _fileSize: BigNumberish,
      _encryptedMetaData: BytesLike,
      _storageNode: string,
      _ephemeral_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAccess(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
