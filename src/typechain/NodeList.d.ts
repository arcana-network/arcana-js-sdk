/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NodeListInterface extends ethers.utils.Interface {
  functions: {
    "clearAllEpoch()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "epochInfo(uint256)": FunctionFragment;
    "getCurrentEpochDetails()": FunctionFragment;
    "getEpochInfo(uint256)": FunctionFragment;
    "getNodeDetails(address)": FunctionFragment;
    "getNodes(uint256)": FunctionFragment;
    "getPssStatus(uint256,uint256)": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "isWhitelisted(uint256,address)": FunctionFragment;
    "listNode(uint256,string,uint256,uint256,string,string)": FunctionFragment;
    "nodeDetails(address)": FunctionFragment;
    "nodeRegistered(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pssStatus(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCurrentEpoch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateEpoch(uint256,uint256,uint256,uint256,address[],uint256,uint256)": FunctionFragment;
    "updatePssStatus(uint256,uint256,uint256)": FunctionFragment;
    "updateWhitelist(uint256,address,bool)": FunctionFragment;
    "whitelist(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clearAllEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpochDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPssStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listNode",
    values: [BigNumberish, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "nodeDetails", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nodeRegistered",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pssStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePssStatus",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearAllEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpochDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPssStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pssStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePssStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "EpochChanged(uint256,uint256)": EventFragment;
    "NodeListed(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EpochChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class NodeList extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NodeListInterface;

  functions: {
    clearAllEpoch(overrides?: Overrides): Promise<ContractTransaction>;

    "clearAllEpoch()"(overrides?: Overrides): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    "epochInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    getCurrentEpochDetails(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, string, string] & {
          declaredIp: string;
          position: BigNumber;
          pubKx: BigNumber;
          pubKy: BigNumber;
          tmP2PListenAddress: string;
          p2pListenAddress: string;
        })[]
      ] & {
        nodes: ([string, BigNumber, BigNumber, BigNumber, string, string] & {
          declaredIp: string;
          position: BigNumber;
          pubKx: BigNumber;
          pubKy: BigNumber;
          tmP2PListenAddress: string;
          p2pListenAddress: string;
        })[];
      }
    >;

    "getCurrentEpochDetails()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, string, string] & {
          declaredIp: string;
          position: BigNumber;
          pubKx: BigNumber;
          pubKy: BigNumber;
          tmP2PListenAddress: string;
          p2pListenAddress: string;
        })[]
      ] & {
        nodes: ([string, BigNumber, BigNumber, BigNumber, string, string] & {
          declaredIp: string;
          position: BigNumber;
          pubKx: BigNumber;
          pubKy: BigNumber;
          tmP2PListenAddress: string;
          p2pListenAddress: string;
        })[];
      }
    >;

    getEpochInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        nodeList: string[];
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    "getEpochInfo(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        nodeList: string[];
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    getNodeDetails(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    "getNodeDetails(address)"(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    getNodes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getNodes(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPssStatus(uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _epoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256)"(
      _epoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isWhitelisted(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWhitelisted(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listNode(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "listNode(uint256,string,uint256,uint256,string,string)"(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nodeDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        pubKx: BigNumber;
        pubKy: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    "nodeDetails(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        pubKx: BigNumber;
        pubKy: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    nodeRegistered(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "nodeRegistered(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pssStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pssStatus(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setCurrentEpoch(
      _newEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurrentEpoch(uint256)"(
      _newEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateEpoch(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateEpoch(uint256,uint256,uint256,uint256,address[],uint256,uint256)"(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePssStatus(uint256,uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateWhitelist(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateWhitelist(uint256,address,bool)"(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whitelist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whitelist(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  clearAllEpoch(overrides?: Overrides): Promise<ContractTransaction>;

  "clearAllEpoch()"(overrides?: Overrides): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      n: BigNumber;
      k: BigNumber;
      t: BigNumber;
      prevEpoch: BigNumber;
      nextEpoch: BigNumber;
    }
  >;

  "epochInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      n: BigNumber;
      k: BigNumber;
      t: BigNumber;
      prevEpoch: BigNumber;
      nextEpoch: BigNumber;
    }
  >;

  getCurrentEpochDetails(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, string, string] & {
      declaredIp: string;
      position: BigNumber;
      pubKx: BigNumber;
      pubKy: BigNumber;
      tmP2PListenAddress: string;
      p2pListenAddress: string;
    })[]
  >;

  "getCurrentEpochDetails()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, string, string] & {
      declaredIp: string;
      position: BigNumber;
      pubKx: BigNumber;
      pubKy: BigNumber;
      tmP2PListenAddress: string;
      p2pListenAddress: string;
    })[]
  >;

  getEpochInfo(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      n: BigNumber;
      k: BigNumber;
      t: BigNumber;
      nodeList: string[];
      prevEpoch: BigNumber;
      nextEpoch: BigNumber;
    }
  >;

  "getEpochInfo(uint256)"(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      n: BigNumber;
      k: BigNumber;
      t: BigNumber;
      nodeList: string[];
      prevEpoch: BigNumber;
      nextEpoch: BigNumber;
    }
  >;

  getNodeDetails(
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      declaredIp: string;
      position: BigNumber;
      tmP2PListenAddress: string;
      p2pListenAddress: string;
    }
  >;

  "getNodeDetails(address)"(
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      declaredIp: string;
      position: BigNumber;
      tmP2PListenAddress: string;
      p2pListenAddress: string;
    }
  >;

  getNodes(epoch: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  "getNodes(uint256)"(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPssStatus(
    oldEpoch: BigNumberish,
    newEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPssStatus(uint256,uint256)"(
    oldEpoch: BigNumberish,
    newEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _epoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256)"(
    _epoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isWhitelisted(
    epoch: BigNumberish,
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelisted(uint256,address)"(
    epoch: BigNumberish,
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listNode(
    epoch: BigNumberish,
    declaredIp: string,
    pubKx: BigNumberish,
    pubKy: BigNumberish,
    tmP2PListenAddress: string,
    p2pListenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "listNode(uint256,string,uint256,uint256,string,string)"(
    epoch: BigNumberish,
    declaredIp: string,
    pubKx: BigNumberish,
    pubKy: BigNumberish,
    tmP2PListenAddress: string,
    p2pListenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nodeDetails(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, string] & {
      declaredIp: string;
      position: BigNumber;
      pubKx: BigNumber;
      pubKy: BigNumber;
      tmP2PListenAddress: string;
      p2pListenAddress: string;
    }
  >;

  "nodeDetails(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, string] & {
      declaredIp: string;
      position: BigNumber;
      pubKx: BigNumber;
      pubKy: BigNumber;
      tmP2PListenAddress: string;
      p2pListenAddress: string;
    }
  >;

  nodeRegistered(
    epoch: BigNumberish,
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "nodeRegistered(uint256,address)"(
    epoch: BigNumberish,
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pssStatus(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pssStatus(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setCurrentEpoch(
    _newEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurrentEpoch(uint256)"(
    _newEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateEpoch(
    epoch: BigNumberish,
    n: BigNumberish,
    k: BigNumberish,
    t: BigNumberish,
    nodeList: string[],
    prevEpoch: BigNumberish,
    nextEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateEpoch(uint256,uint256,uint256,uint256,address[],uint256,uint256)"(
    epoch: BigNumberish,
    n: BigNumberish,
    k: BigNumberish,
    t: BigNumberish,
    nodeList: string[],
    prevEpoch: BigNumberish,
    nextEpoch: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePssStatus(
    oldEpoch: BigNumberish,
    newEpoch: BigNumberish,
    status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePssStatus(uint256,uint256,uint256)"(
    oldEpoch: BigNumberish,
    newEpoch: BigNumberish,
    status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateWhitelist(
    epoch: BigNumberish,
    nodeAddress: string,
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateWhitelist(uint256,address,bool)"(
    epoch: BigNumberish,
    nodeAddress: string,
    allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whitelist(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "whitelist(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    clearAllEpoch(overrides?: CallOverrides): Promise<void>;

    "clearAllEpoch()"(overrides?: CallOverrides): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    "epochInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    getCurrentEpochDetails(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        pubKx: BigNumber;
        pubKy: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      })[]
    >;

    "getCurrentEpochDetails()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        pubKx: BigNumber;
        pubKy: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      })[]
    >;

    getEpochInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        nodeList: string[];
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    "getEpochInfo(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        n: BigNumber;
        k: BigNumber;
        t: BigNumber;
        nodeList: string[];
        prevEpoch: BigNumber;
        nextEpoch: BigNumber;
      }
    >;

    getNodeDetails(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    "getNodeDetails(address)"(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    getNodes(epoch: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    "getNodes(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPssStatus(uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "initialize(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelisted(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelisted(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listNode(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "listNode(uint256,string,uint256,uint256,string,string)"(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nodeDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        pubKx: BigNumber;
        pubKy: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    "nodeDetails(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string] & {
        declaredIp: string;
        position: BigNumber;
        pubKx: BigNumber;
        pubKy: BigNumber;
        tmP2PListenAddress: string;
        p2pListenAddress: string;
      }
    >;

    nodeRegistered(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "nodeRegistered(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pssStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pssStatus(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setCurrentEpoch(
      _newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurrentEpoch(uint256)"(
      _newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEpoch(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEpoch(uint256,uint256,uint256,uint256,address[],uint256,uint256)"(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePssStatus(uint256,uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhitelist(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateWhitelist(uint256,address,bool)"(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whitelist(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    EpochChanged(oldEpoch: null, newEpoch: null): EventFilter;

    NodeListed(publicKey: null, epoch: null, position: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    clearAllEpoch(overrides?: Overrides): Promise<BigNumber>;

    "clearAllEpoch()"(overrides?: Overrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epochInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEpochDetails(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentEpochDetails()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochInfo(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodeDetails(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNodeDetails(address)"(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNodes(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPssStatus(uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_epoch: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "initialize(uint256)"(
      _epoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isWhitelisted(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelisted(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listNode(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "listNode(uint256,string,uint256,uint256,string,string)"(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nodeDetails(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nodeDetails(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeRegistered(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nodeRegistered(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pssStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pssStatus(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setCurrentEpoch(
      _newEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurrentEpoch(uint256)"(
      _newEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateEpoch(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateEpoch(uint256,uint256,uint256,uint256,address[],uint256,uint256)"(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePssStatus(uint256,uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateWhitelist(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateWhitelist(uint256,address,bool)"(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whitelist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelist(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearAllEpoch(overrides?: Overrides): Promise<PopulatedTransaction>;

    "clearAllEpoch()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEpochDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentEpochDetails()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochInfo(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEpochInfo(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeDetails(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNodeDetails(address)"(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNodes(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPssStatus(uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _epoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256)"(
      _epoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelisted(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listNode(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "listNode(uint256,string,uint256,uint256,string,string)"(
      epoch: BigNumberish,
      declaredIp: string,
      pubKx: BigNumberish,
      pubKy: BigNumberish,
      tmP2PListenAddress: string,
      p2pListenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nodeDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nodeDetails(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeRegistered(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nodeRegistered(uint256,address)"(
      epoch: BigNumberish,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pssStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pssStatus(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setCurrentEpoch(
      _newEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurrentEpoch(uint256)"(
      _newEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateEpoch(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateEpoch(uint256,uint256,uint256,uint256,address[],uint256,uint256)"(
      epoch: BigNumberish,
      n: BigNumberish,
      k: BigNumberish,
      t: BigNumberish,
      nodeList: string[],
      prevEpoch: BigNumberish,
      nextEpoch: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePssStatus(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePssStatus(uint256,uint256,uint256)"(
      oldEpoch: BigNumberish,
      newEpoch: BigNumberish,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateWhitelist(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateWhitelist(uint256,address,bool)"(
      epoch: BigNumberish,
      nodeAddress: string,
      allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelist(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
